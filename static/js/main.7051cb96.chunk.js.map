{"version":3,"sources":["Components/List/List.jsx","Redux/myboard-reducer.js","Components/Tasks/Tasks.jsx","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["List","lists","isRemovable","addListBtn","colors","addList","deleteList","tasks","activeList","setActiveList","history","useState","windowAddTask","setWindowAddTask","selectColor","setSelectColor","nameNewList","setNameNewList","onClickBtn","list","push","id","addNewList","length","useEffect","listId","location","pathname","split","find","className","map","index","key","classnames","active","onClick","icon","color","name","filter","task","window","confirm","onChange","e","target","value","autoFocus","onKeyPress","event","type","placeholder","ADD_LIST","ADD_TASK","taskId","initialState","colorId","text","complete","hex","Tasks","renameList","colorName","addTask","checkTask","deleteTask","withoutEmpty","renameTask","React","showNewTaskInput","setShowNewTaskInput","textNewTaskInput","setTextNewTaskInput","newName","prompt","checked","htmlFor","taskText","renameTaskClick","deleteTaskBtn","onBlur","onMouseDown","connect","state","myboard","useHistory","exact","path","Boolean","hostname","match","reducers","combineReducers","action","String","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7051cb96.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport './List.css';\r\nimport classnames from \"classnames\";\r\n\r\n\r\nconst List=({lists, isRemovable, addListBtn, colors, addList,\r\n                deleteList, tasks, activeList, setActiveList, history})=>{\r\n    const [windowAddTask, setWindowAddTask]=useState(false);\r\n    const [selectColor, setSelectColor]=useState('1');\r\n    const [nameNewList, setNameNewList]=useState('');\r\n    const onClickBtn=(list)=>{\r\n        if (isRemovable){\r\n            history.push(`/list/${list.id}`)\r\n        }\r\n        if (!isRemovable && !addListBtn){\r\n            history.push(`/`)\r\n        }\r\n        setWindowAddTask(!windowAddTask);\r\n        setNameNewList('');\r\n        setSelectColor('1')\r\n    };\r\n    const addNewList=()=>{\r\n        if(nameNewList.length>0){\r\n            addList(nameNewList, selectColor)\r\n        }\r\n        setNameNewList('');\r\n        setWindowAddTask(false)\r\n    };\r\n    const listDeleteBtn=(id)=>{\r\n        if (window.confirm(\"Delete?\")){\r\n            deleteList(id);\r\n        }\r\n    };\r\n    useEffect(()=>{\r\n        const listId=history.location.pathname.split('list/')[1];\r\n        if (lists && isRemovable){\r\n            const list=lists.find(list=>list.id===listId);\r\n            setActiveList(list)\r\n        }\r\n    }, [lists, history.location.pathname, isRemovable, setActiveList]);\r\n\r\n    return(\r\n        <>\r\n            <ul className=\"lists\">\r\n                {lists.map((list, index)=>(\r\n                    <li\r\n                        key={index}\r\n                        className={classnames(\r\n                            {active: activeList ? activeList.id===list.id : list.active})}>\r\n                        <div onClick={()=>onClickBtn(list)} className=\"listName\">\r\n                            {list.icon ? list.icon :\r\n                                <i className={`color-${list.color}`}/>\r\n                            }\r\n                            {list.name}\r\n                            {isRemovable &&\r\n                            tasks.filter(task=> task.listId===list.id).length>0 &&\r\n                            ` (${tasks.filter(task=> task.listId===list.id).length})`}\r\n                        </div>\r\n                        {isRemovable &&\r\n                            <div onClick={()=>listDeleteBtn(list.id)}\r\n                                 className=\"listDeleteBtn\">X</div>\r\n                        }\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {addListBtn && windowAddTask &&\r\n                <div className=\"windowAddTask\">\r\n                    <div onClick={onClickBtn} className=\"closeBtn\">X</div>\r\n                    <input onChange={e=>setNameNewList(e.target.value)}\r\n                           value={nameNewList}\r\n                           autoFocus={true}\r\n                           onKeyPress={event => {\r\n                               if (event.key === \"Enter\"){\r\n                                   addNewList()\r\n                               }}}\r\n                           type=\"text\" placeholder=\"Name of a new list\"/>\r\n                    <div className=\"colors\" >\r\n                        {colors.map(color=>(\r\n                            <i onClick={()=>setSelectColor(color.id)}\r\n                               key={color.id}\r\n                               className={`color-${color.name} \r\n                               ${selectColor===color.id ? \"active\" : \"\"}`}/>\r\n                        ))}\r\n                    </div>\r\n                    <button onClick={addNewList}>Add</button>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\nexport default List;","const ADD_LIST='myboard/ADD_LIST';\r\nconst DELETE_LIST='myboard/DELETE_LIST';\r\nconst RENAME_LIST='myboard/RENAME_LIST';\r\nconst ADD_TASK='myboard/ADD_TASK';\r\nconst CHECK_TASK='myboard/CHECK_TASK';\r\nconst DELETE_TASK='myboard/DELETE_TASK';\r\nconst RENAME_TASK='myboard/RENAME_TASK';\r\n\r\nlet listId=3;\r\nlet taskId=5;\r\n\r\nlet initialState = {\r\n    lists:[\r\n            {id:'1', name:'Home', colorId:'4'},\r\n            {id:'2', name:'On work', colorId:'2'},\r\n            {id:'3', name:'Shopping', colorId:'3'},\r\n    ],\r\n    tasks:[\r\n        {id:'1', listId:'1', text:'Clean', complete:true},\r\n        {id:'2', listId:'1', text:'Cooking', complete:false},\r\n        {id:'3', listId:'2', text:'Coffee', complete:false},\r\n        {id:'4', listId:'2', text:'Working', complete:false},\r\n        {id:'5', listId:'1', text:'Go to the shop', complete:false},\r\n    ],\r\n    colors:[\r\n        {id:'1', hex:'#ff000a', name:'red'},\r\n        {id:'2', hex:'#000eff', name:'blue'},\r\n        {id:'3', hex:'#00ff23', name:'green'},\r\n        {id:'4', hex:'#fffd00', name:'yellow'},\r\n        {id:'5', hex:'#ff00ed', name:'purple'},\r\n        {id:'6', hex:'#ffffff', name:'white'},\r\n        {id:'7', hex:'#000000', name:'black'},\r\n    ]\r\n};\r\nexport const myboardReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            listId+=1;\r\n            return {...state, lists:\r\n                    [...state.lists, {id:String(listId), name:action.name, colorId:action.colorId}]};\r\n        case DELETE_LIST:\r\n            return {...state, lists:\r\n                    [...state.lists.filter(list=>list.id!==action.listId)]};\r\n        case RENAME_LIST:\r\n            return {...state, lists: state.lists.map(list=>{\r\n                if (list.id===action.listId){\r\n                    return {...list, name:action.newName}\r\n                }\r\n                return list\r\n                })};\r\n        case ADD_TASK:\r\n            taskId+=1;\r\n            return {...state, tasks:\r\n            [...state.tasks, {id:taskId, listId:action.listId, text: action.text, complete:false}]};\r\n        case CHECK_TASK:\r\n            return {...state, tasks: state.tasks.map(task=>{\r\n                if (task.id===action.taskId){\r\n                    return {...task, complete:!task.complete}\r\n                }\r\n                return task\r\n                })};\r\n        case DELETE_TASK:\r\n            return {...state, tasks:\r\n            [...state.tasks.filter(task=>task.id!==action.taskId)]};\r\n        case RENAME_TASK:\r\n            return {...state, tasks:\r\n            state.tasks.map(task=>{\r\n                if (task.id===action.taskId){\r\n                    return {...task, text:action.text}\r\n                }\r\n                return task\r\n            })};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const addList=(name, colorId)=>({type:ADD_LIST, name, colorId});\r\nexport const deleteList=(listId)=>({type:DELETE_LIST, listId});\r\nexport const renameList=(listId, newName)=>({type:RENAME_LIST, listId, newName});\r\nexport const addTask=(listId, text)=>({type:ADD_TASK, listId, text});\r\nexport const checkTask=(taskId)=>({type:CHECK_TASK, taskId});\r\nexport const deleteTask=(taskId)=>({type:DELETE_TASK, taskId});\r\nexport const renameTask=(taskId, text)=>({type:RENAME_TASK, taskId, text});","import React from 'react';\r\nimport './Tasks.css';\r\n\r\nconst Tasks = ({list, tasks, renameList, colorName, addTask, checkTask,\r\n                   deleteTask, withoutEmpty, renameTask}) => {\r\n    const [showNewTaskInput, setShowNewTaskInput] = React.useState(false);\r\n    const [textNewTaskInput, setTextNewTaskInput] = React.useState('');\r\n    const changeNameList = () => {\r\n        const newName = window.prompt('Name of list:', list.name);\r\n        if (newName) {\r\n            renameList(list.id, newName)\r\n        }\r\n    };\r\n    const enterNewTask=()=>{\r\n        if (textNewTaskInput){\r\n            addTask(list.id,textNewTaskInput)\r\n        }\r\n    };\r\n    const deleteTaskBtn=(taskId)=>{\r\n        if (window.confirm('Delete task?')){\r\n            deleteTask(taskId)\r\n        }\r\n    };\r\n    const renameTaskClick=(id, text)=>{\r\n        const taskText=window.prompt('Rename task?', text);\r\n        if (taskText){\r\n            renameTask(id, taskText)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2 onClick={changeNameList}\r\n                className={`nameTask colorName-${colorName}`}>{list.name}</h2>\r\n            <span className=\"help\">You can change it ;) click</span>\r\n            <div className=\"innerTasks\">\r\n                {tasks.map(task => (\r\n                    <div key={task.id} className=\"task\">\r\n                        <div className=\"checkbox\">\r\n                            <input className=\"checkboxInput\"\r\n                                type=\"checkbox\"\r\n                                   checked={task.complete} onChange={()=>checkTask(task.id)}\r\n                                   id={`chek-${task.id}`}/>\r\n                            <label htmlFor={`chek-${task.id}`}>\r\n                                <div className=\"checkboxIn\">V</div>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"taskName\"\r\n\r\n                             onClick={()=>renameTaskClick(task.id, task.text)} key={task.id}>{task.text}</div>\r\n                        <div className=\"deleteTaskBtn\" onClick={()=>deleteTaskBtn(task.id)}>X</div>\r\n                    </div>\r\n                ))}\r\n                {!withoutEmpty && !tasks.length &&\r\n                    <h2>\r\n                    ***Tasks is empty***\r\n                    </h2>\r\n                }\r\n                <div className=\"newTaskBtn\">\r\n                    {!showNewTaskInput\r\n                        ? <span onClick={() => {setShowNewTaskInput(true); setTextNewTaskInput('')}}>+ New task</span>\r\n                        : <div className=\"newTaskInput\">\r\n                            <input value={textNewTaskInput} onChange={e=>setTextNewTaskInput(e.target.value)} onBlur={()=>setShowNewTaskInput(false)} autoFocus={true} type=\"text\" placeholder=\"Enter text a new task\"/>\r\n                            <button onMouseDown={enterNewTask}>Enter</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\nexport default Tasks;","import React from 'react';\nimport './App.css';\nimport List from \"./Components/List/List\";\nimport {connect} from \"react-redux\";\nimport {addList, addTask, checkTask, deleteList, deleteTask, renameList, renameTask} from \"./Redux/myboard-reducer\";\nimport Tasks from \"./Components/Tasks/Tasks\";\nimport {Route} from \"react-router-dom\";\nimport {useHistory} from \"react-router-dom\";\n\nfunction App({\n                 lists, colors, addList, deleteList, tasks, renameList,\n                 addTask, checkTask, deleteTask, renameTask\n             }) {\n    const [activeList, setActiveList] = React.useState(null);\n    let history=useHistory();\n\n    return (\n        <div className=\"App\">\n            <div className=\"innerApp\">\n                <div className=\"menu\">\n                    <List history={history}\n                        lists={[\n                            {active: history.location.pathname === '/', name: 'All tasks', color: ''}\n                        ]}\n                    />\n                    <List history={history}\n                        isRemovable activeList={activeList}\n                        setActiveList={setActiveList} tasks={tasks} deleteList={deleteList}\n                        lists={lists.map(list => {\n                            list.color = colors.find(color => color.id === list.colorId).name;\n                            return list;\n                        })}/>\n                    <List history={history}\n                        addListBtn\n                          addList={addList} colors={colors}\n                          lists={[\n                              {name: 'Add list', icon: '+ '}\n                          ]}/>\n                </div>\n                <div className=\"tasks\">\n                    <Route exact path=\"/\">\n                        {lists && lists.map(list => (\n                            <Tasks key={list.id}\n                                   renameTask={renameTask}\n                                   deleteTask={deleteTask}\n                                   checkTask={checkTask}\n                                   addTask={addTask}\n                                   renameList={renameList}\n                                   colorName={colors.find(color => color.id === list.colorId).name}\n                                   list={list}\n                                   withoutEmpty\n                                   tasks={tasks.filter(task => task.listId === list.id)}\n                            />\n                        ))\n\n                        }\n                    </Route>\n                    <Route path=\"/list/:id\">\n                        {lists && activeList &&\n                        <Tasks renameTask={renameTask}\n                               deleteTask={deleteTask}\n                               checkTask={checkTask}\n                               addTask={addTask}\n                               renameList={renameList}\n                               colorName={colors.find(\n                                   color => color.id === activeList.colorId).name}\n                               list={activeList}\n                               tasks={tasks.filter(task => task.listId === activeList.id)}\n                        />\n                        }\n                    </Route>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    lists: state.myboard.lists,\n    colors: state.myboard.colors,\n    tasks: state.myboard.tasks,\n});\n\nexport default connect(mapStateToProps,\n    {addList, deleteList, renameList, addTask, checkTask, deleteTask, renameTask})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {myboardReducer} from \"./myboard-reducer\";\r\n\r\n\r\nconst reducers=combineReducers({\r\n    myboard:myboardReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n/*window.store=store;*/\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}