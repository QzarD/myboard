{"version":3,"sources":["Components/List/List.jsx","Redux/myboard-reducer.js","Components/Tasks/Tasks.jsx","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["List","lists","isRemovable","addListBtn","colors","addList","deleteList","tasks","activeList","setActiveList","history","useState","windowAddTask","setWindowAddTask","selectColor","setSelectColor","nameNewList","setNameNewList","onClickBtn","list","push","id","addNewList","length","useEffect","listId","location","pathname","split","find","className","map","index","onClick","key","classnames","listNameBtnContainer","active","icon","color","name","filter","task","window","confirm","width","height","viewBox","fill","xmlns","fill-rule","clip-rule","d","onChange","e","target","value","autoFocus","onKeyPress","event","type","placeholder","ADD_LIST","ADD_TASK","taskId","initialState","colorId","text","complete","hex","Tasks","renameList","colorName","addTask","checkTask","deleteTask","withoutEmpty","renameTask","React","showNewTaskInput","setShowNewTaskInput","textNewTaskInput","setTextNewTaskInput","enterNewTask","newName","prompt","checked","htmlFor","stroke","stroke-width","stroke-linecap","stroke-linejoin","taskText","renameTaskClick","deleteTaskBtn","onBlur","onMouseDown","connect","state","myboard","useHistory","exact","path","Boolean","hostname","match","reducers","combineReducers","action","String","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2f7ec40.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport './List.css';\r\nimport classnames from \"classnames\";\r\n\r\n\r\nconst List=({lists, isRemovable, addListBtn, colors, addList,\r\n                deleteList, tasks, activeList, setActiveList, history})=>{\r\n    const [windowAddTask, setWindowAddTask]=useState(false);\r\n    const [selectColor, setSelectColor]=useState('1');\r\n    const [nameNewList, setNameNewList]=useState('');\r\n    const onClickBtn=(list)=>{\r\n        if (isRemovable){\r\n            history.push(`/list/${list.id}`)\r\n        }\r\n        if (!isRemovable && !addListBtn){\r\n            history.push(`/`)\r\n        }\r\n        setWindowAddTask(!windowAddTask);\r\n        setNameNewList('');\r\n        setSelectColor('1')\r\n    };\r\n    const addNewList=()=>{\r\n        if(nameNewList.length>0){\r\n            addList(nameNewList, selectColor)\r\n        }\r\n        setNameNewList('');\r\n        setWindowAddTask(false)\r\n    };\r\n    const listDeleteBtn=(id)=>{\r\n        if (window.confirm(\"Delete?\")){\r\n            deleteList(id);\r\n        }\r\n    };\r\n    useEffect(()=>{\r\n        const listId=history.location.pathname.split('list/')[1];\r\n        if (lists && isRemovable){\r\n            const list=lists.find(list=>list.id===listId);\r\n            setActiveList(list)\r\n        }\r\n    }, [lists, history.location.pathname, isRemovable, setActiveList]);\r\n\r\n    return(\r\n        <>\r\n            <ul className=\"lists\">\r\n                {lists.map((list, index)=>(\r\n                    <li onClick={()=>onClickBtn(list)}\r\n                        key={index}\r\n                        className={classnames({listNameBtnContainer: addListBtn},\r\n                            {active: activeList ? activeList.id===list.id : list.active})}>\r\n                        <div  className={addListBtn ? 'listNameBtn' : 'listName'}>\r\n                            {list.icon ? list.icon :\r\n                                <i className={`color-${list.color}`}/>\r\n                            }\r\n                            <span>{list.name}</span>\r\n                            {isRemovable &&\r\n                            tasks.filter(task=> task.listId===list.id).length>0 &&\r\n                            ` (${tasks.filter(task=> task.listId===list.id).length})`}\r\n                        </div>\r\n                        {isRemovable &&\r\n                            <div onClick={()=>listDeleteBtn(list.id)}\r\n                                 className=\"listDeleteBtn\">X</div>\r\n                        }\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {addListBtn && windowAddTask &&\r\n                <div className=\"windowAddTask\">\r\n                        <svg onClick={onClickBtn}\r\n                             className=\"closeBtn\"\r\n                             width=\"22\" height=\"22\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.63 10.315C20.63 10.2335 20.6291 10.1523 20.6272 10.0712C20.4972 4.49574 15.9212 0 10.315 0C4.62737 0 0 4.62737 0 10.315C0 15.9721 4.57776 20.5802 10.2234 20.6296C10.2539 20.6299 10.2844 20.63 10.315 20.63C10.3456 20.63 10.3761 20.6299 10.4066 20.6296C16.0522 20.5802 20.63 15.9721 20.63 10.315ZM14.2303 13.1855C14.1879 13.0885 14.1265 13.0009 14.0497 12.928L11.4373 10.315L14.0497 7.70203C14.1922 7.55202 14.2705 7.35226 14.2679 7.14536C14.2652 6.93846 14.1819 6.74077 14.0355 6.59446C13.8892 6.44814 13.6915 6.36477 13.4846 6.36212C13.2777 6.35947 13.078 6.43775 12.928 6.58028L10.315 9.19275L7.70203 6.58028C7.55202 6.43775 7.35226 6.35947 7.14536 6.36212C6.93846 6.36477 6.74077 6.44814 6.59446 6.59446C6.44814 6.74077 6.36477 6.93846 6.36212 7.14536C6.35947 7.35226 6.43775 7.55202 6.58028 7.70203L9.19275 10.315L6.58028 12.928C6.43775 13.078 6.35947 13.2777 6.36212 13.4846C6.36477 13.6915 6.44814 13.8892 6.59446 14.0355C6.74077 14.1819 6.93846 14.2652 7.14536 14.2679C7.35226 14.2705 7.55202 14.1922 7.70203 14.0497L10.315 11.4373L12.928 14.0497C13.0009 14.1265 13.0885 14.1879 13.1855 14.2303C13.2826 14.2727 13.3872 14.2952 13.4931 14.2966C13.599 14.298 13.7041 14.2781 13.8022 14.2382C13.9003 14.1983 13.9894 14.1392 14.0643 14.0643C14.1392 13.9894 14.1983 13.9003 14.2382 13.8022C14.2781 13.7041 14.298 13.599 14.2966 13.4931C14.2953 13.3872 14.2727 13.2826 14.2303 13.1855Z\" fill=\"#5E5E5E\"/>\r\n                        </svg>\r\n                    <input onChange={e=>setNameNewList(e.target.value)}\r\n                           value={nameNewList}\r\n                           autoFocus={true}\r\n                           onKeyPress={event => {\r\n                               if (event.key === \"Enter\"){\r\n                                   addNewList()\r\n                               }}}\r\n                           type=\"text\" placeholder=\"Name of a new list\"/>\r\n                    <div className=\"colors\" >\r\n                        {colors.map(color=>(\r\n                            <i onClick={()=>setSelectColor(color.id)}\r\n                               key={color.id}\r\n                               className={`color-${color.name} \r\n                               ${selectColor===color.id ? \"active\" : \"\"}`}/>\r\n                        ))}\r\n                    </div>\r\n                    <button onClick={addNewList}>Add</button>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\nexport default List;","const ADD_LIST='myboard/ADD_LIST';\r\nconst DELETE_LIST='myboard/DELETE_LIST';\r\nconst RENAME_LIST='myboard/RENAME_LIST';\r\nconst ADD_TASK='myboard/ADD_TASK';\r\nconst CHECK_TASK='myboard/CHECK_TASK';\r\nconst DELETE_TASK='myboard/DELETE_TASK';\r\nconst RENAME_TASK='myboard/RENAME_TASK';\r\n\r\nlet listId=3;\r\nlet taskId=5;\r\n\r\nlet initialState = {\r\n    lists:[\r\n            {id:'1', name:'Home', colorId:'4'},\r\n            {id:'2', name:'On work', colorId:'2'},\r\n            {id:'3', name:'Shopping', colorId:'3'},\r\n    ],\r\n    tasks:[\r\n        {id:'1', listId:'1', text:'Clean', complete:true},\r\n        {id:'2', listId:'1', text:'Cooking', complete:false},\r\n        {id:'3', listId:'2', text:'Coffee', complete:false},\r\n        {id:'4', listId:'2', text:'Working', complete:false},\r\n        {id:'5', listId:'1', text:'Go to the shop', complete:false},\r\n    ],\r\n    colors:[\r\n        {id:'1', hex:'#ff000a', name:'red'},\r\n        {id:'2', hex:'#000eff', name:'blue'},\r\n        {id:'3', hex:'#00ff23', name:'green'},\r\n        {id:'4', hex:'#fffd00', name:'yellow'},\r\n        {id:'5', hex:'#ff00ed', name:'purple'},\r\n        {id:'6', hex:'#ffffff', name:'white'},\r\n        {id:'7', hex:'#000000', name:'black'},\r\n    ]\r\n};\r\nexport const myboardReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            listId+=1;\r\n            return {...state, lists:\r\n                    [...state.lists, {id:String(listId), name:action.name, colorId:action.colorId}]};\r\n        case DELETE_LIST:\r\n            return {...state, lists:\r\n                    [...state.lists.filter(list=>list.id!==action.listId)]};\r\n        case RENAME_LIST:\r\n            return {...state, lists: state.lists.map(list=>{\r\n                if (list.id===action.listId){\r\n                    return {...list, name:action.newName}\r\n                }\r\n                return list\r\n                })};\r\n        case ADD_TASK:\r\n            taskId+=1;\r\n            return {...state, tasks:\r\n            [...state.tasks, {id:taskId, listId:action.listId, text: action.text, complete:false}]};\r\n        case CHECK_TASK:\r\n            return {...state, tasks: state.tasks.map(task=>{\r\n                if (task.id===action.taskId){\r\n                    return {...task, complete:!task.complete}\r\n                }\r\n                return task\r\n                })};\r\n        case DELETE_TASK:\r\n            return {...state, tasks:\r\n            [...state.tasks.filter(task=>task.id!==action.taskId)]};\r\n        case RENAME_TASK:\r\n            return {...state, tasks:\r\n            state.tasks.map(task=>{\r\n                if (task.id===action.taskId){\r\n                    return {...task, text:action.text}\r\n                }\r\n                return task\r\n            })};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const addList=(name, colorId)=>({type:ADD_LIST, name, colorId});\r\nexport const deleteList=(listId)=>({type:DELETE_LIST, listId});\r\nexport const renameList=(listId, newName)=>({type:RENAME_LIST, listId, newName});\r\nexport const addTask=(listId, text)=>({type:ADD_TASK, listId, text});\r\nexport const checkTask=(taskId)=>({type:CHECK_TASK, taskId});\r\nexport const deleteTask=(taskId)=>({type:DELETE_TASK, taskId});\r\nexport const renameTask=(taskId, text)=>({type:RENAME_TASK, taskId, text});","import React from 'react';\r\nimport './Tasks.css';\r\n\r\nconst Tasks = ({\r\n                   list, tasks, renameList, colorName, addTask, checkTask,\r\n                   deleteTask, withoutEmpty, renameTask\r\n               }) => {\r\n    const [showNewTaskInput, setShowNewTaskInput] = React.useState(false);\r\n    const [textNewTaskInput, setTextNewTaskInput] = React.useState('');\r\n    const changeNameList = () => {\r\n        const newName = window.prompt('Name of list:', list.name);\r\n        if (newName) {\r\n            renameList(list.id, newName)\r\n        }\r\n    };\r\n    const enterNewTask = () => {\r\n        if (textNewTaskInput) {\r\n            addTask(list.id, textNewTaskInput)\r\n        }\r\n    };\r\n    const deleteTaskBtn = (taskId) => {\r\n        if (window.confirm('Delete task?')) {\r\n            deleteTask(taskId)\r\n        }\r\n    };\r\n    const renameTaskClick = (id, text) => {\r\n        const taskText = window.prompt('Rename task?', text);\r\n        if (taskText) {\r\n            renameTask(id, taskText)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2 onClick={changeNameList}\r\n                className={`nameTask colorName-${colorName}`}>{list.name}</h2>\r\n            <span className=\"help\">You can change it ;) click</span>\r\n            <div className=\"innerTasks\">\r\n                {tasks.map(task => (\r\n                    <div key={task.id} className=\"task\">\r\n                        <div className=\"checkbox\">\r\n                            <input className=\"checkboxInput\"\r\n                                   type=\"checkbox\"\r\n                                   checked={task.complete} onChange={() => checkTask(task.id)}\r\n                                   id={`chek-${task.id}`}/>\r\n                            <label htmlFor={`chek-${task.id}`}>\r\n                                <div className=\"checkboxIn\">\r\n                                    <svg width=\"17\" height=\"18\" viewBox=\"0 0 11 8\"\r\n                                         fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\r\n                                              stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"\r\n                                              stroke-linejoin=\"round\"/>\r\n                                    </svg>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"taskName\"\r\n\r\n                             onClick={() => renameTaskClick(task.id, task.text)} key={task.id}>{task.text}</div>\r\n                        <div className=\"deleteTaskBtn\" onClick={() => deleteTaskBtn(task.id)}>X</div>\r\n                    </div>\r\n                ))}\r\n                {!withoutEmpty && !tasks.length &&\r\n                <h2>\r\n                    ***Tasks is empty***\r\n                </h2>\r\n                }\r\n                <div className=\"newTaskBtn\">\r\n                    {!showNewTaskInput\r\n                        ? <div onClick={() => {\r\n                            setShowNewTaskInput(true);\r\n                            setTextNewTaskInput('')\r\n                        }}>\r\n                            <svg width=\"11\" height=\"11\" viewBox=\"0 0 16 16\"\r\n                                 fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                          <path d=\"M8 1V15\" stroke=\"#b9b9b9\" stroke-width=\"2\"\r\n                                                stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                          <path d=\"M1 8H15\" stroke=\"#b9b9b9\" stroke-width=\"2\"\r\n                                                stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                      </svg>\r\n                            <span> New task</span>\r\n                    </div>\r\n                        : <div className=\"newTaskInput\">\r\n                            <input value={textNewTaskInput}\r\n                                   onChange={e => setTextNewTaskInput(e.target.value)}\r\n                                   onBlur={() => setShowNewTaskInput(false)}\r\n                                   onKeyPress={e => {\r\n                                       if (e.key === \"Enter\") {\r\n                                           enterNewTask();\r\n                                           setShowNewTaskInput(false)\r\n                                       }\r\n                                   }} autoFocus={true} type=\"text\"\r\n                                   placeholder=\"Enter text a new task\"/>\r\n                            <button onMouseDown={enterNewTask}>Enter</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\nexport default Tasks;","import React from 'react';\nimport './App.css';\nimport List from \"./Components/List/List\";\nimport {connect} from \"react-redux\";\nimport {addList, addTask, checkTask, deleteList, deleteTask, renameList, renameTask} from \"./Redux/myboard-reducer\";\nimport Tasks from \"./Components/Tasks/Tasks\";\nimport {Route} from \"react-router-dom\";\nimport {useHistory} from \"react-router-dom\";\n\nfunction App({\n                 lists, colors, addList, deleteList, tasks, renameList,\n                 addTask, checkTask, deleteTask, renameTask\n             }) {\n    const [activeList, setActiveList] = React.useState(null);\n    let history=useHistory();\n\n    return (\n        <div className=\"App\">\n            <div className=\"innerApp\">\n                <div className=\"menu\">\n                    <List history={history}\n                        lists={[\n                            {active: history.location.pathname === '/', name: 'All tasks', icon: (\n                                    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path d=\"M12.96 8.10001H7.74001C7.24321 8.10001 7.20001 8.50231 7.20001 9.00001C7.20001 9.49771 7.24321 9.90001 7.74001 9.90001H12.96C13.4568 9.90001 13.5 9.49771 13.5 9.00001C13.5 8.50231 13.4568 8.10001 12.96 8.10001V8.10001ZM14.76 12.6H7.74001C7.24321 12.6 7.20001 13.0023 7.20001 13.5C7.20001 13.9977 7.24321 14.4 7.74001 14.4H14.76C15.2568 14.4 15.3 13.9977 15.3 13.5C15.3 13.0023 15.2568 12.6 14.76 12.6ZM7.74001 5.40001H14.76C15.2568 5.40001 15.3 4.99771 15.3 4.50001C15.3 4.00231 15.2568 3.60001 14.76 3.60001H7.74001C7.24321 3.60001 7.20001 4.00231 7.20001 4.50001C7.20001 4.99771 7.24321 5.40001 7.74001 5.40001ZM4.86001 8.10001H3.24001C2.74321 8.10001 2.70001 8.50231 2.70001 9.00001C2.70001 9.49771 2.74321 9.90001 3.24001 9.90001H4.86001C5.35681 9.90001 5.40001 9.49771 5.40001 9.00001C5.40001 8.50231 5.35681 8.10001 4.86001 8.10001ZM4.86001 12.6H3.24001C2.74321 12.6 2.70001 13.0023 2.70001 13.5C2.70001 13.9977 2.74321 14.4 3.24001 14.4H4.86001C5.35681 14.4 5.40001 13.9977 5.40001 13.5C5.40001 13.0023 5.35681 12.6 4.86001 12.6ZM4.86001 3.60001H3.24001C2.74321 3.60001 2.70001 4.00231 2.70001 4.50001C2.70001 4.99771 2.74321 5.40001 3.24001 5.40001H4.86001C5.35681 5.40001 5.40001 4.99771 5.40001 4.50001C5.40001 4.00231 5.35681 3.60001 4.86001 3.60001Z\" fill=\"black\"/>\n                                    </svg>\n                                )}\n                        ]}\n                    />\n                    <List history={history}\n                        isRemovable activeList={activeList}\n                        setActiveList={setActiveList} tasks={tasks} deleteList={deleteList}\n                        lists={lists.map(list => {\n                            list.color = colors.find(color => color.id === list.colorId).name;\n                            return list;\n                        })}/>\n                    <List history={history}\n                        addListBtn\n                          addList={addList} colors={colors}\n                          lists={[\n                              {name: 'Add list', icon: (\n                                      <svg width=\"11\" height=\"11\" viewBox=\"0 0 16 16\"\n                                           fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                          <path d=\"M8 1V15\" stroke=\"#b9b9b9\" stroke-width=\"2\"\n                                                stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                          <path d=\"M1 8H15\" stroke=\"#b9b9b9\" stroke-width=\"2\"\n                                                stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                      </svg>\n                                  )}\n                          ]}/>\n                </div>\n                <div className=\"tasks\">\n                    <Route exact path=\"/\">\n                        {lists && lists.map(list => (\n                            <Tasks key={list.id}\n                                   renameTask={renameTask}\n                                   deleteTask={deleteTask}\n                                   checkTask={checkTask}\n                                   addTask={addTask}\n                                   renameList={renameList}\n                                   colorName={colors.find(color => color.id === list.colorId).name}\n                                   list={list}\n                                   withoutEmpty\n                                   tasks={tasks.filter(task => task.listId === list.id)}\n                            />\n                        ))\n\n                        }\n                    </Route>\n                    <Route path=\"/list/:id\">\n                        {lists && activeList &&\n                        <Tasks renameTask={renameTask}\n                               deleteTask={deleteTask}\n                               checkTask={checkTask}\n                               addTask={addTask}\n                               renameList={renameList}\n                               colorName={colors.find(\n                                   color => color.id === activeList.colorId).name}\n                               list={activeList}\n                               tasks={tasks.filter(task => task.listId === activeList.id)}\n                        />\n                        }\n                    </Route>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    lists: state.myboard.lists,\n    colors: state.myboard.colors,\n    tasks: state.myboard.tasks,\n});\n\nexport default connect(mapStateToProps,\n    {addList, deleteList, renameList, addTask, checkTask, deleteTask, renameTask})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {myboardReducer} from \"./myboard-reducer\";\r\n\r\n\r\nconst reducers=combineReducers({\r\n    myboard:myboardReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n/*window.store=store;*/\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}